apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.name }}
  labels:
    app: {{ .Values.app.name }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.app.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.app.name }}
    spec:
      imagePullSecrets:
        - name: {{ .Values.app.image.secret }}
      containers:
      - name: {{ .Values.app.name }}
        image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.app.image.pullPolicy }}
        env:
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: dbsecret
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dbsecret
              key: password
        - name: SPRING_DATASOURCE_URL                   
          valueFrom:
            configMapKeyRef:
              name: dbconfig           
              key: db_host
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP


---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.db.name }}
  labels:
    app: {{ .Values.db.name }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.db.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.db.name }}
    spec:
      containers:
      - name: {{ .Values.db.name }}
        image: "{{ .Values.db.image.repository }}:{{ .Values.db.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.db.image.pullPolicy }}
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: dbsecret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: dbsecret
              key: password
        - name: POSTGRES_DB                   
          valueFrom:
            configMapKeyRef:
              name: dbconfig           
              key: db_name
        ports:
        - name: dbport
          containerPort: 5432
          protocol: TCP
        volumeMounts:
        - name: dbvol
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: dbvol
        persistentVolumeClaim:
          claimName: {{ .Values.volumeClaimName }}

---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-deployment
  labels:
    app: react-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-deployment
  template:
    metadata:
      labels:
        app: react-deployment
    spec:
      imagePullSecrets:
        - name: {{ .Values.app.image.secret }}
      containers:
      - name: react-container
        image: "{{ .Values.front.image.repository }}:{{ .Values.front.image.tag }}"
        ports:
        - name: front-port
          containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config	

---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  containers:
  - name: redis
    image: redis:6.2.6
    command:
      - redis-server
      - "/redis-master/redis.conf"
    env:
    - name: MASTER
      value: "true"
    ports:
    - containerPort: 6379
    resources:
      limits:
        cpu: "0.1"
    volumeMounts:
    - mountPath: /redis-master-data
      name: data
    - mountPath: /redis-master
      name: config
  volumes:
    - name: data
      emptyDir: {}
    - name: config
      configMap:
        name: my-redis-config
        items:
        - key: redis-config
          path: redis.conf	




